#
# This file contins snippets for bash
#

# My name
declare -r MYNAME=$(basename $0)

# skeleton script
#!/bin/bash
def main() {
... your code here ...
}
main "$@"
# end of skeleton script

# Interactive input test
[[ -t 0 ]] && echo interactive || echo stdin is a pipe or file

# Interactive output test
[[ -t 1 ]] && echo output to screen || echo output to file

# ROT13 cipher (https://en.wikipedia.org/wiki/ROT13)
cat "$@" | tr 'a-zA-Z' 'n-za-mN-ZA-M'

# Be nice, or not (https://bbs.archlinux.org/viewtopic.php?pid=1284016#p1284016)
benice="renice -n 19 -p $$ && ionice -c3 -p $$ && ionice -p $$"
berude="sudo renice -n -19 -p $$ && sudo ionice -c1 -p $$ && ionice -p $$"

# Sudo multiple commands
# http://stackoverflow.com/a/5560480
sudo -- sh -c "cmd1; cmd2; cmd3"

# Restart script as root
[[ $EUID == 0 ]] || { sudo $0 "$@"; exit; }

# For-Loop file names with spaces
# http://www.cyberciti.biz/tips/handling-filenames-with-spaces-in-bash.html
#!/bin/bash
SAVEIFS=$IFS
IFS=$(echo -en "\n\b")
for f in *
do
  echo "$f"
done
IFS=$SAVEIFS

# Copy directory including hidden (.dotfiles) to existing directory
# http://superuser.com/a/367303/101178
cp -a /source/path/. /existing/dest/path

# Case insensitive regular expression
# http://geekbraindump.blogspot.co.uk/2010/06/case-insensitive-regex-in-bash.html
shopt -s nocasematch
# yout regex test code goes here
shopt +s nocasematch

# Set an exit code by executing exit with an argument in a subshell
$ (exit 42); echo "$?"
42

# Make a floppy image
dd bs=512 count=2880 if=/dev/zero of=floppy.img
mkfs.msdos floppy.img
mount -o loop floppy.img /mnt
<-- copy files to /mnt -->
umount /mnt


# Make a sparse floppy image
dd bs=1 seek=1474560 count=0 if=/dev/zero of=floppy.img
mkfs.msdos floppy.img
mount -o loop floppy.img /mnt
<-- copy files to /mnt -->
umount /mnt
<-- show off the sparse size -->
$ ls -l floppy.img
-rw-r--r-- 1 john users 1474560 Oct 15 12:58 floppy.img
$ du floppy.img 
24	floppy.img
$ du --apparent-size floppy.img
1440	floppy.img

# Remove everything except specific files/directories
# http://superuser.com/a/529861/101178
shopt -s extglob
rm -rf !(u|p) # remove everything except u and p

# Find and delete empty directories beneath current directory
find -type d -empty -exec rmdir '{}' \;

# Shred and delete a file
# http://www.linuxforums.org/forum/miscellaneous/46693-how-shred-entire-directory-tree.html#post255978
shred -u file

# find and shred all files beneath a directory tree
find -type f -execdir shred -u '{}' \;
rm -rf *

# combine PDFs
pdfjoin a.pdf b.pdf # creates b-joined.pdf
pdfunite a.pdf b.pdf ab.pdf

# iterate arguments
# http://unix.stackexchange.com/questions/258512
for arg in "$@"   # or just for arg do
do                
  shift
  [ "$arg" = "unwanted arg" ] && continue
  set -- "$@" "$arg"
done

printf '%s\n' "$@"

# check command exists
# (preferable solutions instead of using 'which'
# http://stackoverflow.com/questions/592620

hash foo

# Merge two directory trees
rsync -av --remove-source-files src/ dest/

# Get last argument (respects whitespace)
last_arg=${@:${#@}}

# Remove last argument (respects whitespace)
# http://stackoverflow.com/a/26163980
set -- "${@:1:$(($#-1))}"

#
# Function to break QUERY_STRING into array (for use in CGI script)
# http://stackoverflow.com/a/26338656
get_query_string() {
  local q="$QUERY_STRING"
  local re1='^(\w+=\w+)&?'
  local re2='^(\w+)=(\w+)$'
  while [[ $q =~ $re1 ]]; do
    q=${q##*${BASH_REMATCH[0]}}
    [[ ${BASH_REMATCH[1]} =~ $re2 ]] && eval "$1+=([${BASH_REMATCH[1]}]=${BASH_REMATCH[2]})"
  done
}

# use like this:
declare -A params
get_query_string params 

#(see samples in ad-hoc directory)

# Create a temporary filename
# (for when you can't or don't want to use "mktemp")
temp="$(basename $0).$$.temp"
