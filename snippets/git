#
# This file contins snippets for git
#
#
# For a good explanation of git concepts see http://gitolite.com/gcs

# Visualise a repository
git log --graph --oneline --date-order --decorate --color --all

# Terse commit log
git log --pretty=oneline --abbrev-commit

# Stage all changes, including deletes
git add -u

# Stage all changes, including deletes under a certain path, for example
git add -u my/path

# Undo last commit
# http://stackoverflow.com/questions/3528245
# whats-the-difference-between-git-reset-mixed-soft-and-hard
git reset HEAD~        # reverts commit, clears index (e.g. back before `git add`)
git reset --soft HEAD~ # reverts commit, leaves index (e.g. `git add` intact)

# Redo last commit
git commit -c ORIG_HEAD # new commit, reusing previous commit message

# Reuse last commit message (e.g. after undoing last commit)
# http://stackoverflow.com/questions/16858069
git commit --reuse-message=HEAD@{1}
or
git commit -C HEAD@{1}

# Stage only deleted files
# http://stackoverflow.com/a/1402800/712506
git ls-files --deleted -z | xargs -0 git rm

# Rename current branch
git branch -m newname

# Rename another branch
git branch -m oldname newname

# Delete/Rename remote branch
# http://stackoverflow.com/a/4754132/712506
git branch new-branch-name origin/old-branch-name
git push origin new-branch-name
git push origin :old-branch-name

# Set upstream branch
git branch -u remote/branch
example: git branch -u origin/master

# See upstream branch
# http://stackoverflow.com/a/4952368/712506
git branch -vv
or
http://stackoverflow.com/a/26526119
git checkout

# Delete remote branch
git push origin :branch-name
# or, if a tag exists with the same name
git push origin :refs/heads/branch-name

# Delete remote tag
git push origin :refs/tags/tag-name

# Garbage collect all repos
# http://tim.theenchanter.com/2008/06/garbage-collect-every-git-repository-on.htmlfind . -type d -name .git | while read dir; do pushd "$dir"; git gc --prune; popd; done

# Remove untracked files fro Git working copy
# http://stackoverflow.com/questions/61212
# Beware... there's no going back. Use -n or --dry-run to preview the damage you'll do!
git clean -f
git clean -f -d # also remove directories
git clean -f -x # also remove ignored files
git clean -f -X # only remove ignored files

# Find deleted file
# http://stackoverflow.com/a/16635324/712506
# see the changes of a file, works even if the file was deleted
git log -- [file path]

# limit the output of Git log to the last commit, i.e. the commit which delete the file
# -1 to see only the last commit. use 2 to see the last 2 commits etc
git log -1 -- [file path]

# Show files changed between commit
git diff --name-status HEAD^

# Side-by-side diff
# http://stackoverflow.com/a/39225649
git difftool -y -x sdiff  HEAD^ | less

# Show merge conflct file versions
# http://www.gitguys.com/topics/merging-with-a-conflict-conflicts-and-resolutions/
git ls-files -u
git show :1:myfile
git show :2:myfile
git show :3:myfile

# RawGit serves raw files directly from GitHub
# with proper Content-Type headers.
# http://rawgit.com

#
# Stashing
#

# List
git stash list

# Stash hunk-by-hunk http://stackoverflow.com/a/17969785
git stash -p

# Nice explanation of internals
http://www.shadabahmed.com/blog/2014/03/18/inside-git-guts/

Git will call any executable found on the path that begins with `git-`,
so if you create a shell script called `/usr/bin/git-foo` then you
can do `git foo`.


# GITHUB URL shorten
$ curl -i https://git.io -F "url=https://gist.github.com/......."
Location: https://git.io/vMXDa

# Git worktrees
# allow a second directory off the same clone (multiple concurrent branches)
# http://stackoverflow.com/a/30185564
git worktree add ../some_dir some_branch

# List worktrees
git worktree list

# List untracked files (e.g. to tar them up)
tar cvf untracked.tar $(git ls-files --others --exclude-standard)

# Delete untracked files and directories
git clean -dfx

# Download Github pull request as patch
$ wget https://github.com/user/repo/pull/123/patch
$ git am 123.patch

# GI - ruby Github query tool
# https://github.com/rafalchm/gi
$ gem install gi
$ gi execute --repo="rails/rails" "SELECT * FROM forks WHERE sort=stargazers,per_page=5"

# Find all past names of a file
git log --name-only --format=format: --follow -- dockbar-gtk2.py | sort -u

# Create a patch from last commit
# formatted for sending by email
git format-patch -n HEAD^

# Create a patch containing diffs to another branch, for example
git format-patch origin/master

# Create a raw patch from last commit
git show HEAD > my.patch
#or
git format-patch HEAD^ --stdout > my.patch

# Create a diffstat for recent commits
git diff --stat HEAD^ # previous commit
git diff --stat HEAD~ # previous commit
git diff --stat HEAD^^ # previous 2 commits
git diff --stat HEAD~2 # previous 2 commit
git diff --stat c945ca75 # specific commit

# Email patches from last 4 commits
# (using -compose opens up an editor to send a covering email; 5 mails sent in total)
# requires configuration of get-send-email
# can be useful to include a diffstat (see above) in covering mail
git send-email -compose -4

# Check a patch (dry run)
git apply --stat my.patch

# Apply a patch but don't commit
git apply my.patch

# Apply, commit and sign off a patch
# https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/
git am --signoff my.patch

# Find a commits that mention string (e.g. to find when something was removed)
# http://stackoverflow.com/questions/4404444/how-do-i-blame-a-deleted-line
# also known as "The Git Pickaxe" (Google it...)
git log -S <string> path/to/file
git log -G <regex> path/to/file
